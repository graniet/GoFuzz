package fuzzer

import (
	"os"
	"bufio"
	"strconv"
	"github.com/pkg/errors"
	"log"
	"strings"
)

type Vulnerability struct{
	Type string
	Payloads []string
	Detector []string
}

func (v *Vulnerability) LoadPayload() error{
	if _, err := os.Stat("payloads/" + v.Type + "/" + v.Type + ".txt"); err != nil{
		return errors.New("Fuzzing type do not exist.")
	}

	if _, err := os.Stat("payloads/" + v.Type + "/detector.txt"); err != nil{
		return errors.New("Fuzzing type do not exist.")
	}

	file, err := os.OpenFile("payloads/" + v.Type + "/" + v.Type + ".txt",os.O_RDONLY, 755)

	if err != nil{
		return errors.New("error when opening : " + err.Error())
	}

	reader := bufio.NewReader(file)
	var line string
	for{
		line, err = reader.ReadString('\n')
		v.Payloads = append(v.Payloads, strings.TrimSpace(line))
		if err != nil {
			break
		}
	}
	log.Println(strconv.Itoa(len(v.Payloads)) + " payloads loaded.")

	file, err = os.OpenFile("payloads/" + v.Type + "/detector.txt",os.O_RDONLY, 755)

	if err != nil{
		return errors.New("error when opening : " + err.Error())
	}

	reader = bufio.NewReader(file)
	for{
		line, err = reader.ReadString('\n')
		v.Detector = append(v.Detector, strings.TrimSpace(line))
		if err != nil {
			break
		}
	}
	log.Println(strconv.Itoa(len(v.Detector)) + " detectors loaded.")
	return nil
}